Developer Notes for Lantern

SVN is used to upload changes to code.google.com

  https://lantern.googlecode.com/svn/trunk

The code project site:
  http://code.google.com/p/lantern

  Go to the "Sources" tab to locate the SVN password.

AppEngine sites:

  app_id: k16-8888
  http://k16-8888.appspot.com

    This corresponds to the demo1/ and demo1-test/ directories

  app_id: pythonshell1
  http://pythonshell1.appspot.com

    This corresponds to the ri directory.

Related AppEngine sites:

  app_id: tempkhanacadquiz

    This is a modified version of Khan exercises, currently not checked in.

AppEngine admin site:

  http://appengine.google.com

See demo1/README for additional notes.

Use the following header on all source files:
---------------------------------------------------------------------
Copyright 2010 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
---------------------------------------------------------------------

COPYING based on:  http://www.apache.org/licenses/LICENSE-2.0.txt

-----------
Overview
-----------

GIT may be integrated with SVN for local revisions. For example:

- ~/src/lantern may be created for local development. From that directory,
  run:

  git svn clone https://lantern.googlecode.com/svn lantern-svn \
    --username vchen@google.com --stdlayout

- Create .gitignore:

  git svn show-ignore > .gitignore

- Directories:

  demo/ is an OBSOLETE demo AppEngine/Python application
  demo1/ is the current demo AppEngine/Django/Python application
  demo1-test/ is a the unit-test directory. It contains testing-only files and
      symlinks into demo1 to allow testing demo1 python directly.

- See the following for set up of your development environment.

-----------
Development setup (2010-05-06)
-----------
Install django-1.1.1 to local machine's Python site-packages
 - NOTE: you might need to chmod -R a+wX in the extracted directory before
   running:
      python setup.py install

Install pymox: http://code.google.com/p/pymox 0.5.3 into site-packages
 - Need to symlink mox.py and stubout.py into the demo1-test directory or
   figure out how to add path:

   cd demo1-test
   ln -s /usr/lib/python2.5/site-packages/mox.py ./site-packages
   ln -s /usr/lib/python2.5/site-packages/stubout.py ./site-packages

  demo1-test/__init__.py adds ./site-packages to path.  Deployment should
  probably skip site-packages.

Load and extract appengine SDK.
 - Create a symlink to the app-engine directory in each "app", e.g.

   cd demo1
   ln -s /usr/local/apps/google_appengine .google_appengine

   Do the same in demo1-test.

Download and extract GAEunit, coying gaeunit into the test source tree (e.g.,
  demo1-test).

-----------
Closure JavaScript Library
----------
There are two packages:
  - Closure Library: The JavaScript lib.
    http://code.google.com/closure/library
  - Closure Compiler: Compiler for merging JS into a single file.
    http://code.google.com/closure/compiler

One can "install" each of these in /usr/local/google/home/<you>/apps/ and
symlink from the project.

Closure Library:
  $ mkdir /usr/local/google/home/<you>/apps
  $ svn checkout http://closure-library.googlecode.com/svn/trunk/ closure-library

Closure Compiler:
  Download the ZIP file
  $ mkdir /usr/local/google/home/<you>/apps/closure-compiler
  $ cd /usr/local/google/home/<you>/apps/closure-compiler
  $ unzip ~/Downloads/compiler-latest.zip

To set up sym links in the development tree, e.g.,

  $ ln -s /usr/local/google/home/<you>/apps/closure-library \
      demo1/static/js/closure
  $ ln -s /usr/local/google/home/<you>/apps/closure-compiler \
      demo1/.closure_compiler
  $ ln -s /usr/local/google/home/<you>/apps/closure-compiler \
      demo1-test/.closure_compiler

-----------
Testing the Setup
-----------

To run the demo1-test that contains the unit-testing infrastructure:

  cd demo1-test
  make deploy_files
  make test

  Then go to http://localhost:9094 in your browser

  Click on the "login" link to log in with a dummy user

  Go to http://localhost:9094/test to run the unit tests

To test changes usually does not require restarting the server:

 - From demo1-test directory, run the following to recompile JavaScript

    make deploy_files

 - Reload the page in your browser. You may need to SHIFT-F5 to force refresh
   and sometimes clear your browser cache.

By default demo1/template/base.html loads the compiled JavaScript:

  lanternJs.js

For debugging, you may want to change it temporarily to:

  lanternJs-bundle.js

DO NOT submit this change.


-------------
Typical work flow
-------------
To see remote branches:
  git branch -r

To see your local branches:
  git branch

To work on new features, based on trunk (git's master):

  git checkout -b myfeature master

Make your changes, commits, etc to this branch.

Create a code-review branch in SVN when ready:

  git svn branch -m 'Branch: Message' vchen-20100821
  git checkout -b local/vchen-20100821 vchen-20100821

  git format-patch --stdout --binary  master..myfeature | git am -s3
  git svn dcommit

Ask for review. Further review and commits and dcommits happen in
local/vchen-20100821.

When complete, merge to trunk:

  - IMPORTANT: Merge from trunk into your branch. Resolve conflicts, test,
    and commit changes. Experimental procedure:

    git checkout master
    git svn rebase
    git svn log   (to see the revision number of HEAD)
    git checkout local/vchen-20100821
    git merge --squash master
    git commit -m 'Bring up-to-date with trunk r267'

    Where the revision number is read from 'git svn log'

  - Checkout a copy of trunk to a temporary location:
    svn checkout https://lantern.googlecode.com/svn/trunk lantern

  - Change to current working directory:
    cd lantern

  - Merge it with the branch using svn merge
    svn merge https://lantern.googlecode.com/svn/trunk \
    https://lantern.googlecode.com/svn/branches/vchen-20100821

  - Commit the change(merging with the branch) to the trunk:
    svn commit -m 'Merging vchen-20100821 with trunk: rev 252:272'

    The revision numbers are the last merge point (or where the branch was
    cut) and the head of the branch. If you were to merge again (not normal),
    you would merge from the second the second value (e.g., 272).

  - The directory may be removed now.

Once released, set a tag with the version:

  git svn tag Lantern_2a

Delete SVN branches (after changes have been merged):

  svn delete https://lantern.googlecode.com/svn/branches/vchen-20100821
  git branch -D -r vchen-20100821
  rm -rf .git/svn/refs/remotes/vchen-20100821

Garbage collect:

  git gc

Get new revs from SVN into git:

  git svn fetch

If someone else is also working on your branch and have submitted changes, 
update with:

  git svn rebase


-----------
Branch and Merge w/out git (2010-06-28)
-----------
1) Creating a branch:

 -To create a branch use svn copy:
     svn copy path_to_trunk path_to_new_branch
 -Branch name should be in the following format:
   username-date (eg. mukundjha-20100614)
   (eg. svn copy https://lantern.googlecode.com/svn/trunk \
       https://lantern.googlecode.com/svn/branches/mukundjha-20100614 )
 -Checkout the branch using svn checkout
   svn checkout https://lantern.googlecode.com/svn/branches/mukundjha-20100614 \
    lantern_branch


2) Merging:
To merge the branch back to trunk, follow the steps below.
(NOTE:Make sure you have commited all changes to the branch before merging)

 - Checkout a copy of trunk:
    svn checkout https://lantern.googlecode.com/svn/trunk lantern

 - Change to current working directory:
    cd lantern

 - Merge it with the brach using svn merge
    svn merge https://lantern.googlecode.com/svn/trunk \
    https://lantern.googlecode.com/svn/branches/mukundjha-20100614

 - Commit the change(merging with the branch) to the trunk:
    svn commit -m "merging with branch mukundjha-20100614"


-----------------
Deployment to AppEngine
-----------------
- Update Version in app.yaml.(Otherwise, you will trash the deployed app!)
  - Ideally, as soon as an app is finalized and made "live", the version
    should be updated.
  - Update BOTH demo1/app.yaml and demo1-test/app.yaml

- If demo1-test/index.yaml has been updated, copy it to demo1/index.yaml

- From demo1-test, run:

  make deploy_files

- Go to the demo1 directory, run:

  .google_appengine/appcfg.py --email=yourname@google.com update .

-----------------
Misc
-----------------
  To add ignores to directories:

    svn propset svn:ignore -F ../.gitignore py public/images templates/app

  where .gitignore contains patterns to ignore auto-generated files:

